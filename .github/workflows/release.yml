name: Release

on:
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux_amd64
            binary_name: r3_linux_amd64
          - goos: linux
            goarch: arm64
            suffix: linux_arm64
            binary_name: r3_linux_arm64
          - goos: windows
            goarch: amd64
            suffix: windows_amd64
            binary_name: r3_windows_amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          go build -ldflags "-X main.appVersion=${VERSION} -s -w" -o ${{ matrix.binary_name }} .

      - name: Create archive (Linux)
        if: matrix.goos == 'linux'
        run: |
          mkdir -p release_package
          cp ${{ matrix.binary_name }} release_package/r3
          cp config_template.json release_package/
          cp config_dedicated.json release_package/
          cp config_portable.json release_package/
          cp LICENSE release_package/
          cp README.md release_package/
          chmod +x release_package/r3
          tar -czf ${{ matrix.binary_name }}.tar.gz -C release_package .

      - name: Create archive (Windows)
        if: matrix.goos == 'windows'
        run: |
          mkdir -p release_package
          cp ${{ matrix.binary_name }} release_package/r3.exe
          cp config_template.json release_package/
          cp config_dedicated.json release_package/
          cp config_portable.json release_package/
          cp LICENSE release_package/
          cp README.md release_package/
          cd release_package && zip -r ../${{ matrix.binary_name }}.zip .

      - name: Upload Release Asset (Linux)
        if: matrix.goos == 'linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.binary_name }}.tar.gz
          asset_name: ${{ matrix.binary_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.goos == 'windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.binary_name }}.zip
          asset_name: ${{ matrix.binary_name }}.zip
          asset_content_type: application/zip

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.ref_name }}
            type=raw,value=latest,enable={{is_default_branch}}



      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
